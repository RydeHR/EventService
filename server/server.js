/* ----------- REQUIRE PACKAGES ----------- */
var newrelic = require('newrelic'); // Uncomment For newRelic load testing
var koaNewrelic = require('koa-newrelic')(newrelic); // Uncomment For newRelic load testing
var Koa = require('koa');
var app = new Koa();
var Router = require('koa-router');
var router = new Router();
var bodyParser = require('koa-bodyparser');
var morgan = require('koa-morgan');


/* ----------- IMPORT SERVER ROUTES ----------- */
// ROUND 0 - 4 ROUTES
const roundZero = require('./roundZero.js');
const roundOne = require('./roundOne.js');
const breakUpClientData = require('./breakUpClientData.js');
const roundThree = require('./roundThree.js');
const roundFour = require('./roundFour.js');

// sqs_ReceiveMessage.receiveSQSMessage()
// .then((result) => {
//   console.log('This is what we get back from SQS queue message', result)
// })
// .catch((error) => {
//   console.log('There is an error with getting message from SQS queue', error)
// })

/* ----------- ROUND 0 - PASSING HISTORICAL DATA TO PRICING SERVICE ----------- */

	// STEP 1 GENERATE & LOAD INITIAL 10 MILLION DATA
	// 10 Million entries generated by the function in /database/generateTenMillionDataEntries.js.
	// 10 Million entries saved in /TenMillionEntries.
	// 10 Million entries loaded via COPY in Cassandra shell (cqlsh).

	// STEP 2 CONTINUALLY PASS DATA TO PRICING SERVICE

/* ----------- ROUND 1 - USER OPENS THE APP AND GETS SURGE RATE ----------- */

	// USER DISAGREES WITH SURGE RATE
	router.post('/events/history', async (ctx, next) => {
		roundOne.logCloseEvent(Object.values(ctx.request.body).join(','))
		breakUpClientData.createSmallerObjects(ctx.request.body)
		.then((result) => {
			roundThree.sendToSQSLocationService(result[1]);
			roundThree.storeLocationData(Object.values(result[1]).join(','));
			roundZero.sendToSQSPricingService(result[0]);
			roundZero.storePricingData(Object.values(result[0]).join(','));
			roundFour.insertAnalyticsData(Object.values(result[2]).join(','));
		})
		.catch((err) => {
			console.log('There was an error with the insertion', err)
		})
	})

/* ----------- ROUND 2 - USER ENTERS DROPOFF LOCATION AND GETS PRICE ----------- */
	// WE DON'T NEED TO ROUTE THIS BECAUSE THE FUNCTIONS ARE ALREADY COVERED BY STEPS 1 & STEP 3.

/* ----------- ROUND 3 - USER AGREES TO PRICE AND BOOKS THE RIDE/EVENT ----------- */

	/* ----------- USER DISAGREES WITH SURGE RATE ----------- */
	// ALREADY INVOKED ABOVE

	/* ----------- USER BOOKS RIDE ----------- */

/* ----------- ROUND 4 - RETRIEVING DATA TO ANSWER THE BUSINESS QUESTION ----------- */

	/* ----------- STORING DATA FOR ANALYTICS ----------- */

	/* ----------- RETRIEVING DATA FOR ANALYTICS ----------- */
	router.get('/analytics', async (ctx, next) => {
		let randomNumber = Math.floor(Math.random()*1500);
		const displayData = await roundFour.retrieveAnalyticsData(randomNumber)
		console.log('Client is querying for this ->', displayData.rows);
		ctx.body = displayData.rows;
	})

/* ----------- APP.USE ----------- */
app.use(morgan('combined'));
app.use(bodyParser());
app.use(router.routes());

/* ----------- ARTILLERY.IO LOAD TESTING ----------- */
// (run in terminal) artillery run server/load_testing/loadTest.yml

/* ----------- NEW RELIC LOAD TESTING ----------- */
app.use(koaNewrelic);

/* ----------- APP.LISTEN ----------- */
app.listen(3000, () => console.log('Server started on Port 3000'));